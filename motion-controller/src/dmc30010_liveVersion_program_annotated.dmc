#AUTO                'Run from this point on start up

#SETUP               'Start set up code
SIA=1,29,14,-1<10>1    'Configure SSI interface to resolver for axis A
YCA=16384              'Set axis A encoder steps per cycle - note that this is one turn of the selector wheel, or 8 turns of the stepper motor
MT-2.5                 'Set Motor Type to Stepper Motor, reversed direction, active high pulses
LCA=15                 'Set Low Current Stepper Mode - go to low current 15 samples after end of motion
DMA[6]                 'Dimension Array A for control and reporting
DMPOS[4]               'Dimension Array POS for storing position data
DMR[2]                 'Dimension Array R for monitoring resolver - temporary to debug resolver issues
ME1                    'Modbus array write enable

#init                'Start init code
A[0]=5                 'Commanded position
A[1]=0                 'Current position
A[2]=1                 'Speed
A[3]=0                 'Movement status 1: moving, 0: motion complete
A[4]=0                 'Time taken for last move
A[5]=0                 'Current error in 1/100th degrees
POS[0]=153             'Position of Position 1 relative to home
POS[1]=POS[0]+4096     'Position of Position 2 relative to home
POS[2]=POS[1]+4096     'Position of Position 3 relative to home
POS[3]=POS[2]+4096     'Position of Position 4 relative to home
R[0]=0                 'Resolver turns
R[1]=1                 'Resolver counts
raw_pos=17000          'Current raw position
angle=17000            'Current angle
dangle=17000           'Current angle error
calc_mov=0             'Calculated movement
raw_pos1=17000         'Raw position after first attempt at movement
angle1=17000           'Angle after first attempt at movement
dangle1=17000          'Error after first attempt at movement
raw_pos2=17000         'Raw positi
angle2=17000           'Angle of Position 2
dangle2=17000          'Error on moving to Position 2
calc_mv2=0
raw_pos3=17000         'Raw position of Position 3
angle3=17000
dangle3=17000
calc_mv3=0
raw_pos4=17000         'Raw position of Position 1
angle4=17000
dangle4=17000
calc_mv4=0
raw_pos5=17000
angle5=17000
dangle5=17000
calc_mv5=0
dspr=256000
rres=16384             'Resolver resolution
rstep=45.1111          'Resolver step to angle conversion factor 1/100th degrees
drstep=15.625          'Drive ratio motor step to resolver step
medsp=75000            'Medium speed
slowsp=30000           'Low speed
suslow=10000           'Seek speed for final adjustments (very slow)
medAC= 150000          'Medium speed acceleration
medDC= 150000          'Medium speed deceleration
slowAC= 50000          'Slow speed acceleration
slowDC= 50000          'Slow speed deceleration
suslowAC= 10000        'Seek speed acceleration
suslowDC= 10000        'Seek speed deceleration
fastDC= 300000         'Fast deceleration

#EVENTLP             'Start of Event Loop
com_pos=A[0]          
cur_pos=A[1]
raw_pos=_TPA           'Get resolver position
R[0] = raw_pos/rstep   'Update resolver turn counts
R[1] = raw_pos%rstep   'Update resolver position counts
IF(com_pos<=1);setpoint=POS[0];ENDIF   'Get current set point
IF(com_pos=2);setpoint=POS[1];ENDIF
IF(com_pos=3);setpoint=POS[2];ENDIF
IF(com_pos=4);setpoint=POS[3];ENDIF
IF(com_pos>6);setpoint=POS[3];ENDIF    'Default to last position on nonsense position - Do we really want this?
angle=raw_pos/rstep                    'Update error angle
dangle=((setpoint-raw_pos)/rstep)

IF(com_pos<>cur_pos)   'Check for new commanded position
IF(com_pos=5);            'Has a home been commanded
JP#HOME
ELSE                      'Simple move commanded
JP#MOVE
raw_pos=_TPA           'Get resolver position
R[0] = raw_pos/rstep   'Update resolver turn counts
R[1] = raw_pos%rstep   'Update resolver position counts
angle=raw_pos/rstep                    'Update error angle
dangle=((setpoint-raw_pos)/rstep)
ENDIF
ELSE                   'Check measured position against set point
IF(@ABS(setpoint-raw_pos)*drstep>3) 'If position error is too large, move
JP#MOVE
raw_pos=_TPA           'Get resolver position
R[0] = raw_pos/rstep   'Update resolver turn counts
R[1] = raw_pos%rstep   'Update resolver position counts
angle=raw_pos/rstep                    'Update error angle
dangle=((setpoint-raw_pos)/rstep)
ENDIF
A[5]=dangle
JP#EVENTLP            'Go back to start of event loop
ENDIF
EN   'End program

#MOVE   'Start of move command subroutine
A[3]=1  '  Set status to "moving"
speed=A[2] '  Set speed
IF(speed<=1);SPslowsp;ACslowAC;DCslowDC;ENDIF
IF(speed>=2);SPmedsp;ACmedAC;DCmedDC;ENDIF
raw_pos=_TPA   'Get current position
IF(raw_pos<0)  'Deal with errors
raw_pos=0
ENDIF
angle=(raw_pos/rstep)   '
dangle=((setpoint-raw_pos)/rstep)
calc_mov=@INT[((raw_pos-setpoint)*drstep)]
bgtime=TIME
IF(@ABS[dangle]>0.8)
PRcalc_mov
BGA
AMA
raw_pos1=_TPA
angle1=(raw_pos1/rstep)
dangle1=((setpoint-raw_pos1)/rstep)
A[5]=dangle1
ENDIF
raw_pos2=_TPA
angle2=(raw_pos2/rstep)
dangle2=((setpoint-raw_pos2)/rstep)
calc_mv2=@INT[((raw_pos2-setpoint)*drstep)]
IF(@ABS[dangle2]>0.8)
PRcalc_mv2
BGA
AMA
raw_pos2=_TPA
dangle2a=((setpoint-raw_pos2)/rstep)
A[5]=dangle2a
ENDIF
raw_pos3=_TPA
angle3=(raw_pos3/rstep)
dangle3=((setpoint-raw_pos3)/rstep)
calc_mv3=@INT[((raw_pos3-setpoint)*drstep)]
IF(@ABS[dangle3]>0.8)
PRcalc_mv3
BGA
AMA
raw_pos3=_TPA
dangle3a=((setpoint-raw_pos3)/rstep)
A[5]=dangle3a
ENDIF
raw_pos4=_TPA
angle4=(raw_pos4/rstep)
dangle4=((setpoint-raw_pos4)/rstep)
calc_mv4=@INT[((raw_pos4-setpoint)*drstep)]
IF(@ABS[dangle4]>0.8)
SPsuslow;ACsuslowAC;DCfastDC
PRcalc_mv4
BGA
AMA
raw_pos4=_TPA
dangle4a=((setpoint-raw_pos4)/rstep)
A[5]=dangle4a
ENDIF
raw_pos5=_TPA
angle5=(raw_pos5/rstep)
dangle5=((setpoint-raw_pos5)/rstep)
calc_mv5=@INT[((raw_pos5-setpoint)*drstep)]
IF(@ABS[dangle5]>0.8)
SPsuslow;ACsuslowAC;DCfastDC
PRcalc_mv5
BGA
AMA
raw_pos5=_TPA
dangle5a=((setpoint-raw_pos5)/rstep)
A[5]=dangle5a
ENDIF
endtime=TIME
deltaT=endtime-bgtime
A[4]=deltaT
A[1]=A[0]
A[3]=0
JP#EVENTLP

#HOME
A[3]=1
SPslowsp;ACslowAC;DCfastDC
SH
HMA
bgtime=TIME
BGA
AMA
home=_TPA
endtime=TIME
deltaT=endtime-bgtime
A[4]=deltaT
POS[0]=home+153
POS[1]=POS[0]+4096
POS[2]=POS[1]+4096
POS[3]=POS[2]+4096
A[1]=5
curr_pos=A[1]
A[0]=1
JP#EVENTLP